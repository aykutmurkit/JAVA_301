
Set Arayüzü bir kümeyi tanımlar. Collection arayüzü set arayüzünün üstünde yer almaktadır.

Set arayüzünün katı (concrete) implementasyonları ise;

    1. HashSet
    2. LinkedHashSet
    3. TreeSet
    4. EnumSet


Set arayüzünü implemente eden arayüzler ise;

    1. Sorted Set
    2. Navigable Set



HashSet nesneleri herhangi bir sıra olmaksızın tutar. Set nesneleri unique'tir.

Set arayüzünde get metodu yoktur. Hedef nesneye gitmek için set üzerinde ilerlemeliyiz(iterate)

TreeSet nesneleri sıralı (sorted) şekilde tutar. treeSet içinde her nesne comparable veya Comparator arayüzünü implement etmek zorundadır.

SortedSet;

    1. Set inteface'inin alt sınıfır ve içeriği artan şekilde düzenler.
    2. Generic bir arayüzdür.
    3. Set tarafından sağlanan metotların yanında last() ve first() gibi metotları sağlar.


*
*
*
<x> --> burada x Sorted set içerisinde tutacağımız verinin tipini belirtir.

// sayıları küçükten büyüğe doğru sıralar.

SortedSet<Integer> sortedSet = new TreeSet<>();
sortedSet.add(3);
sortedSet.add(4);
sortedSet.add(1);

Iterator<Integer> iterator = sortedSet.iterator();
while(iterator.hasNext()){
    Integer next = iterator.next();
    System.out.println(next);
}

*
*
*
// alfabetik olarak sıralanarak döner

SortedSet<String> sortedSet = new TreeSet<>();
sortedSet.add("Aykut");
sortedSet.add("İrem");
sortedSet.add("Sibel");

Iterator<String> iterator = sortedSet.iterator();
while(iterator.hasNext()){
    String next = iterator.next();
    System.out.println(next);
}

*
*
*

// mesela kendi yazdığın öğrenci nesnesini tutmak için 

Comparable<Student> implement etmen lazm.

içerise compareTo methodu yazılacak. Burayı kullanarak neye göre sıralanmasını gerektiğini yazabilirsin.